apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-assets
  labels:
    app: {{ template "..name" . }}
    chart: {{ template "..chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  gen_hostfile.sh: |
    set -xev

    target=$1
    max_try=$2

    if [ -z "$max_try" ]
    then
      max_try=10
    fi

    trap "rm -f ${target}_new" EXIT TERM INT KILL

    cluster_size=$(kubectl -n {{ .Release.Namespace }} get statefulsets {{ .Release.Name }}-worker -o jsonpath='{.status.replicas}')
    echo "Cluster size: ${cluster_size}"

    tried=0
    # until [ "$(wc -l < ${target}_new)" -eq $cluster_size ]; do
    while true; do
      target_new_size=0
      if [ -f "${target}_new)" ]
      then
        echo "FOUND THE the file '${target}_new'"
        target_new_size=$(wc -l ${target}_new)
      else
        echo "Not finding the file '${target}_new'"
      fi
      echo "Check if [ target_new_size -eq cluster_size ]"
      echo "$target_new_size =?= $cluster_size"
      if [ $target_new_size -eq $cluster_size ];
      then
        break
      fi
      pod_names=$(kubectl -n {{ .Release.Namespace }} get pod \
        --selector=app={{ template "..name" . }},chart={{ template "..chart" . }},release={{ .Release.Name }},role=worker \
        --field-selector=status.phase=Running \
        -o=jsonpath='{.items[*].metadata.name}')

      if [ -f "${target}_new" ]
      then
        rm -f ${target}_new
      fi
      for p in ${pod_names}; do
        echo "Pod Name: ${p}"

        #We try to get the number of CPUs on the pod's node, so that we can
        #put this data into the hostfile.
        #**NB** We assume there is one pod per node
        node_name=$(kubectl get pod ${p} -o=jsonpath='{.spec.nodeName}')
        echo "Node name: ${node_name}"
        node_cpus=$(kubectl get node ${node_name} -o=jsonpath='{.status.allocatable.cpu}')
        echo "Node CPU: ${node_cpus}"

        node_cpus_reduced=$((node_cpus - 10))
        echo "Node CPU Reduced: ${node_cpus_reduced}"

        echo "${p}.{{ .Release.Name }} slots=${node_cpus_reduced} max_slots=${node_cpus_reduced}">> ${target}_new
      done

      echo "Contenuto del file: ${target}_new"
      echo "-----------------------------------------------------"
      cat "${target}_new"
      echo "-----------------------------------------------------"

      tried=$(expr $tried + 1)
      if [ -n "$max_try" ] && [ $max_try -le $tried ]; then
        break
      fi
      sleep 1
    done

    #sed -i "1i{{ .Release.Name }}-master.{{ .Release.Name }}" ${target}_new

    if [ -e ${target}_new ]; then
      mv ${target}_new ${target}
    fi


{{ if .Values.mpiMaster.autoUpdateHostfile.enabled }}
  hostfile_update_every: {{.Values.mpiMaster.autoUpdateHostfile.updateEvery | default "15" | quote }}
{{ end }}
